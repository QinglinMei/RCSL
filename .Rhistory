RCSL_B <- curSim$RCSL_B
RCSL_B <- RCSL_B[AllIndex,AllIndex]
#dimnames(RCSL_B) <- list(c(1:nrow(RCSL_B)),c(1:nrow(RCSL_B)))
RCSL2_B <- curSim$RCSL2_B
RCSL2_B <- RCSL2_B[AllIndex,AllIndex]
#dimnames(RCSL2_B) <- list(c(1:nrow(RCSL2_B)),c(1:nrow(RCSL2_B)))
SIMLR_B <- Sim_all1$Biase$SIMLR_Sim
SIMLR_B <- SIMLR_B[AllIndex,AllIndex]
N=10
RCSL_B=log2(N*RCSL_B+1)
RCSL2_B=log2(N*RCSL2_B+1)
SIMLR_B=log2(N*SIMLR_B+1)
sampleLabel <- data.frame(index=1:length(label), label=label)
sampleLabel <- sampleLabel[order(sampleLabel$label),]
anno_row <- sampleLabel[,"label",drop=F]
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row$label))]
names(rowColors) <- unique(anno_row$label)
ann_colors <- list(label=rowColors)
Name <- names(Sim_all1[i])
title <- sprintf("%s",Name)
ch <- c(2,8,9)
color_my <-brewer.pal(9,name="Blues")[ch]  ## Blues  c("powderblue","seagreen4","palegreen4")
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=F,
annotation_colors=ann_colors[1], annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
ann_colors
anno_row
label
anno_row <- label
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row$label))]
names(rowColors) <- unique(anno_row$label)
anno_row <- sampleLabel[,"label",drop=F]
anno_row
anno_row <- label
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row))]
names(rowColors) <- unique(anno_row$label)
names(rowColors) <- unique(anno_row)
ann_colors <- list(label=rowColors)
Name <- names(Sim_all1[i])
title <- sprintf("%s",Name)
ch <- c(2,8,9)
color_my <-brewer.pal(9,name="Blues")[ch]  ## Blues  c("powderblue","seagreen4","palegreen4")
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=F,
annotation_colors=ann_colors[1], annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
colorRampPalette(color_my)(100)
anno_row
anno_row
ann_colors
rowColors
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=T,
annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
annotation_col
anno_row
length(anno_row)
dim(RCSL_B)
colnames(mat)
colnames(RCSL_B)
dimnames(RCSL_B) <- list(c(1:nrow(RCSL_B)),c(1:nrow(RCSL_B)))
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=T,
annotation_names_row=F,  annotation_colors=ann_colors[1],
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
anno_row
class(anno_row)
sampleLabel <- data.frame(index=1:length(label), label=label)
sampleLabel <- sampleLabel[order(sampleLabel$label),]
anno_row <- sampleLabel[,"label",drop=F]
anno_row
class(anno_row)
anno_row <- as.data.frame(label)
anno_row
anno_row <- as.data.frame(label)
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row))]
names(rowColors) <- unique(anno_row)
ann_colors <- list(label=rowColors)
Name <- names(Sim_all1[i])
title <- sprintf("%s",Name)
ch <- c(2,8,9)
color_my <-brewer.pal(9,name="Blues")[ch]  ## Blues  c("powderblue","seagreen4","palegreen4")
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=T,
annotation_names_row=F,  annotation_colors=ann_colors[1],
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
anno_row
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row$label))]
names(rowColors) <- unique(anno_row$label)
ann_colors <- list(label=rowColors)
Name <- names(Sim_all1[i])
title <- sprintf("%s",Name)
ch <- c(2,8,9)
color_my <-brewer.pal(9,name="Blues")[ch]  ## Blues  c("powderblue","seagreen4","palegreen4")
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=T,
annotation_names_row=F,  annotation_colors=ann_colors[1],
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
Heat.RCSL_B
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=T,
annotation_names_row=F,  annotation_colors=ann_colors[1],
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
draw(Heat.RCSL_B
>)
library(usethis)
library(roxygen2)
library(devtools)
library(goodpractice)
library(BiocCheck)
setwd("Users/qinglin/GitHub")
setwd("/Users/qinglin/Github")
setwd("Users/qinglin/GitHub")
BiocCheck("RCSL")
BiocCheck("RCSL")
BiocCheck("RCSL")
getwd()
aa=readRDS("./data/Goolam.rds")
aa=readRDS("./data/Goolam.RDS")
aa=readRDS("./data/Goolam.rds")
getwd()
aa=readRDS("/data/Goolam.rds")
load("/Users/qinglin/Downloads/yan.rda")
yan
load('./data/yan.rda')
getwd()
load('/data/yan.rda')
load('./RCSL/data/yan.rda')
library(RCSL)
library(SingleCellExperiment)
library(SingleCellExperiment)
library(ggplot2)
library(igraph)
origData <- readRDS("./RCSL/data/Goolam.rds")
origData <- readRDS("./RCSL/data/Goolam.rds")
getwd()
origData <- readRDS("/RCSL/data/Goolam.rds")
a=readRDS("./RCSL/data/Goolam.rds")
origData <- readRDS("./RCSL/data/Goolam.rds")
origData <- readRDS("./RCSL/data/yan.rda")
origData <- load("./RCSL/data/yan.rda")
yan
head(ann)
yan[1:3, 1:3]
origData <- yan
head(ann)
yan[1:3, 1:3]
origData <- yan
## 1. Pre-processing
In practice, we find it always beneficial to pre-process single-cell RNA-seq dataset, including:
1. Log transformation.
2. Gene filter
```{r, cache=TRUE}
data <- logcounts(origData)
data <- log2(as.matrix(origData) + 1)
gfData <- GenesFilter(data)
data <- log2(as.matrix(origData) + 1)
gfData <- GenesFilter(data)
## 2. Calculate the initial similarity matrix S
```{r, cache=TRUE}
resSimS <- SimS(gfData)
```
## 3. Estimate the number of clusters C
```{r, cache=TRUE}
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
```
resSimS <- SimS(gfData)
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
res_RCSL <- BDSM(resSimS$S, Estimated_C)
ARI_RCSL <- igraph::compare(res_RCSL$y, label, method = "adjusted.rand")
label <- ann
dim(yan)
ARI_RCSL <- igraph::compare(res_RCSL$y, label, method = "adjusted.rand")
label
class(ann)
as.character(ann)
as.numeric(ann)
as.matrix(ann)
label <- as.matrix(ann)
ARI_RCSL <- igraph::compare(res_RCSL$y, label, method = "adjusted.rand")
ARI_RCSL
label
as.factor(ann)
ann
label <- ann$cell_type1
ARI_RCSL <- igraph::compare(res_RCSL$y, label, method = "adjusted.rand")
ARI_RCSL
res_TrajecAnalysis <- TrajectoryAnalysis(res_RCSL$gfData, res_RCSL$drData, res_RCSL$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
label <- origData$cell_type1
res_TrajecAnalysis <- TrajectoryAnalysis(res_RCSL$gfData, res_RCSL$drData, res_RCSL$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
dim(res_RCSL$gfData)
dim(res_RCSL$drData)
res_RCSL
res_TrajecAnalysis <- TrajectoryAnalysis(gfData, drData, resSimS,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
res_TrajecAnalysis <- TrajectoryAnalysis(gfData, drData, resSimS,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
label <- origData$cell_type1
DataName <- "Yan"
res_RCSL <- RCSL(data, GF = TRUE, gfRatio = 0.025, pcRatio = 0.95, largeThre = 2000)
res_RCSL <- RCSL(data, GF = TRUE, gfRatio = 0.025, pcRatio = 0.95, largeThre = 2000)
res_RCSL
res_RCSL$resSimS <- SimS(gfData, pcRatio, largeThre, NN.method = "KNN", Dis.method = "Euclidean")
# Estimate the number of clusters C
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
# Calculate the block diagonal matrix B
res_BDSM <- BDSM(resSimS$S, Estimated_C)
B <- res_BDSM$B
y <- res_BDSM$y
res <- list("gfData" = gfData, "drData" = resSimS$drData,
"S" = resSimS$S, "B" = B, "C" = Estimated_C$C, "y" = y)
resSimS <- SimS(gfData, pcRatio, largeThre, NN.method = "KNN", Dis.method = "Euclidean")
# Estimate the number of clusters C
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
# Calculate the block diagonal matrix B
res_BDSM <- BDSM(resSimS$S, Estimated_C)
B <- res_BDSM$B
y <- res_BDSM$y
res <- list("gfData" = gfData, "drData" = resSimS$drData,
"S" = resSimS$S, "B" = B, "C" = Estimated_C$C, "y" = y)
resSimS <- SimS(gfData, pcRatio, largeThre, NN.method = "KNN", Dis.method = "Euclidean")
# Estimate the number of clusters C
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
# Calculate the block diagonal matrix B
res_BDSM <- BDSM(resSimS$S, Estimated_C)
B <- res_BDSM$B
y <- res_BDSM$y
res <- list("gfData" = gfData, "drData" = resSimS$drData,
"S" = resSimS$S, "B" = B, "C" = Estimated_C$C, "y" = y)
Estimated_C
#'
#' Perform the RCSL program
#'
#' @param datat normalizaed gene expression matrix(each column represents a cell)
#' @param GF should I need the gene filter step?
#' @param gfRatio the ratio of the gene filter
#' @param pcRatio the ratio between the variance of the choosed PCs and the total variance
#' @param largeThre the number of cells to determine whether it is a large datasets
#' @param neiRatio ratio of the number of selected neighbors to the total number of cells in NR
#'
#' @return gfData gene expression matrix after genes filtering
#' @return B block-diagonal matrix
#' @return C estimated number of clusters
#' @return y clustering results
#'
RCSL <- function(data, GF = TRUE, gfRatio = 0.025, pcRatio = 0.95, largeThre = 2000,
NN.method = "KNN", Dis.method = "Euclidean", neiRatio = 0.65){
# Gene filter
if(GF == TRUE){
gfData <- GenesFilter(data, gfRatio)
} else{
gfData <- data[rowSums(data)!=0,,drop=F]
}
# Calculate the similarity matrix S
resSimS <- SimS(gfData, pcRatio, largeThre, NN.method = "KNN", Dis.method = "Euclidean")
# Estimate the number of clusters C
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
# Calculate the block diagonal matrix B
res_BDSM <- BDSM(resSimS$S, Estimated_C)
B <- res_BDSM$B
y <- res_BDSM$y
res <- list("gfData" = gfData, "drData" = resSimS$drData,
"S" = resSimS$S, "B" = B, "C" = Estimated_C, "y" = y)
return(res)
}
origData <- yan
label <- ann$cell_type1
data <- log2(as.matrix(origData) + 1)
gfData <- GenesFilter(data)
resSimS <- SimS(gfData)
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
res_RCSL <- BDSM(resSimS$S, Estimated_C)
ARI_RCSL <- igraph::compare(res_RCSL$y, label, method = "adjusted.rand")
label <- origData$cell_type1
DataName <- "Yan"
res_RCSL <- RCSL(data, GF = TRUE, gfRatio = 0.025, pcRatio = 0.95, largeThre = 2000)
res_TrajecAnalysis <- TrajectoryAnalysis(res_RCSL$gfData, res_RCSL$drData, res_RCSL$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
ann
label
label <- origData$cell_type1
label
label <- ann$cell_type1
DataName <- "Yan"
res_RCSL <- RCSL(data, GF = TRUE, gfRatio = 0.025, pcRatio = 0.95, largeThre = 2000)
res_RCSL <- RCSL(data, GF = TRUE, gfRatio = 0.025, pcRatio = 0.95, largeThre = 2000)
res_TrajecAnalysis <- TrajectoryAnalysis(res_RCSL$gfData, res_RCSL$drData, res_RCSL$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
library(umap)
install.packages("umap")
library(umap)
res_TrajecAnalysis <- TrajectoryAnalysis(res_RCSL$gfData, res_RCSL$drData, res_RCSL$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
res_TrajecAnalysis$MSTPlot
res_TrajecAnalysis$PseudoTimePlot
res_TrajecAnalysis$TrajectoryPlot
origData <- readRDS("./RCSL/data/Yan.rds")
Goolam
aa=readRDS('./RCSL/Yan.rds')
Yan <- readRDS("/Users/qinglin/Github/RCSL/data/Yan.rds")
getwd()
logcounts(Yan)[1:5,1:5]
data[1:5,1:5]
Yan$cell_type1
ann
res_TrajecAnalysis <- TrajectoryAnalysis(res_RCSL$gfData, res_RCSL$drData, res_RCSL$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
res_TrajecAnalysis$MSTPlot
res_TrajecAnalysis$PseudoTimePlot
res_TrajecAnalysis$TrajectoryPlot
Yan <- readRDS("/Users/qinglin/Github/RCSL/data/Yan.rds")
data=logcounts(yan)
data=logcounts(Yan)
label=Yan$cell_type1
res_RCSL <- RCSL(data, GF = TRUE, gfRatio = 0.025, pcRatio = 0.95, largeThre = 2000)
ARI_RCSL <- igraph::compare(res_RCSL$y, label, method = "adjusted.rand")
ARI_RCSL
res_TrajecAnalysis <- TrajectoryAnalysis(res_RCSL$gfData, res_RCSL$drData, res_RCSL$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
res_TrajecAnalysis$MSTPlot
gfData <- GenesFilter(data)
resSimS <- SimS(gfData)
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
res_RCSL <- BDSM(resSimS$S, Estimated_C)
ARI_RCSL <- igraph::compare(res_RCSL$y, label, method = "adjusted.rand")
ARI_RCSL
resSimS$resSimS
resSimS$res_RCSL
data <- log2(as.matrix(origData) + 1)
gfData <- GenesFilter(data)
resSimS <- SimS(gfData)
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
res_RCSL <- BDSM(resSimS$S, Estimated_C)
ARI_RCSL <- igraph::compare(res_RCSL$y, label, method = "adjusted.rand")
ARI_RCSL
label <- ann$cell_type1
DataName <- "Yan"
#res_RCSL <- RCSL(data, GF = TRUE, gfRatio = 0.025, pcRatio = 0.95, largeThre = 2000)
res_TrajecAnalysis <- TrajectoryAnalysis(gfData, resSimS$drData, resSimS$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
res_TrajecAnalysis$MSTPlot
res_TrajecAnalysis$PseudoTimePlot
res_TrajecAnalysis$TrajectoryPlot
BiocCheck("RCSL")
BiocCheck("RCSL")
1:
2
seq_len(3)
library(RCSL)
data(Yan)
data(yan)
yan
res=RCSL(log2(yan+1))
res$y
res_TrajecAnalysis <- TrajectoryAnalysis(res_RCSL$gfData, res_RCSL$drData, res_RCSL$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
dim(res_RCSL$gfData)
res_RCSL=res
BiocCheck
res_TrajecAnalysis <- TrajectoryAnalysis(res_RCSL$gfData, res_RCSL$drData, res_RCSL$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
res_TrajecAnalysis$PseudoTimePlot
res_TrajecAnalysis$MSTPlot
res_TrajecAnalysis$TrajectoryPlot
gfData <- GenesFilter(log2(yan+1), gfRatio)
gfRatio = 0.025
gfData <- GenesFilter(log2(yan+1), gfRatio)
pcRatio = 0.95
largeThre = 2000
resSimS <- SimS(gfData, pcRatio, largeThre, NN.method = "KNN", Dis.method = "Euclidean")
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
res_BDSM <- BDSM(resSimS$S, Estimated_C)
B <- res_BDSM$B
y <- res_BDSM$y
res <- list("gfData" = gfData, "drData" = resSimS$drData,
"S" = resSimS$S, "B" = B, "C" = Estimated_C, "y" = y)
res_TrajecAnalysis <- TrajectoryAnalysis(res$gfData, res$drData, res$S,
clustRes = res$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
res_TrajecAnalysis$PseudoTimePlot
res_TrajecAnalysis$MSTPlot
label
label=ann
res_TrajecAnalysis <- TrajectoryAnalysis(res$gfData, res$drData, res$S,
+                                          clustRes = res$y, TrueLabel = label, startPoint = 1,
+                                          dataName = DataName)
res_TrajecAnalysis <- TrajectoryAnalysis(res$gfData, res$drData, res$S,
+                                          clustRes = res$y, TrueLabel = label, startPoint = 1,
+                                          dataName = DataName)
res_TrajecAnalysis <- TrajectoryAnalysis(res$gfData, res$drData, res$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
BiocCheck("RCSL")
BiocCheck("RCSL")
BiocCheck("RCSL")
BiocCheck("RCSL")
library(RCSL)
library(SingleCellExperiment)
library(ggplot2)
library(igraph)
library(umap)
origData <- data(yan)
label <- ann$cell_type1
origData
data(yan)
origData <- yan
label <- ann$cell_type1
data <- log2(as.matrix(origData) + 1)
gfData <- GenesFilter(data)
resSimS <- SimS(gfData)
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
Estimated_C
res_RCSL <- BDSM(resSimS$S, Estimated_C)
ARI_RCSL <- igraph::compare(res_RCSL$y, label, method = "adjusted.rand")
ARI_RCSL
res_TrajecAnalysis <- TrajectoryAnalysis(gfData, resSimS$drData, resSimS$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
BiocCheck("RCSL")
library(SingleCellExperiment)
library(ggplot2)
library(igraph)
library(umap)
head(ann)
yan[1:3, 1:3]
origData <- yan
label <- ann$cell_type1
data <- log2(as.matrix(origData) + 1)
gfData <- GenesFilter(data)
resSimS <- SimS(gfData)
dim(origData)
rm(list=ls(all=T))
gc()
getwd()
library(RCSL)
library(SingleCellExperiment)
library(ggplot2)
library(igraph)
library(umap)
head(ann)
yan[1:3, 1:3]
origData <- yan
label <- ann$cell_type1
data <- log2(as.matrix(origData) + 1)
gfData <- GenesFilter(data)
resSimS <- SimS(gfData)
Estimated_C <- EstClusters(resSimS$drData,resSimS$S)
res_RCSL <- BDSM(resSimS$S, Estimated_C)
ARI_RCSL <- igraph::compare(res_RCSL$y, label, method = "adjusted.rand")
DataName <- "Yan"
res_TrajecAnalysis <- TrajectoryAnalysis(gfData, resSimS$drData, resSimS$S,
clustRes = res_RCSL$y, TrueLabel = label, startPoint = 1,
dataName = DataName)
library("BiocCheck")
BiocCheck("RCSL")
BiocCheck("RCSL")
BiocCheck("RCSL")
BiocCheck("RCSL")
dim(yan)
BiocCheck("RCSL")
BiocCheck("RCSL")
BiocCheck("RCSL")
BiocCheck("RCSL")
BiocCheck("RCSL2")
BiocCheck("RCSL")
