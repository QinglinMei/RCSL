label <- curSim$label
label <- plyr::revalue(label, c("1"="2-cell",'2'='4-cell','3'='Blast','4'='Zygote'))
levels(label) <- c('Zygote','2-cell','4-cell','Blast')
label <- curSim$label
label <- plyr::revalue(label, c("1"="2-cell",'2'='4-cell','3'='Blast','4'='Zygote'))
label
label <- factor(label,c('Zygote','2-cell','4-cell','Blast'))
albel
label
Type1 <- plyr::revalue(Type1, c('zygote'='Zygote',"2cell"="2-cell",'4cell'='4-cell','blast'='Blast'))
Type1 <-factor(Type1,c('Zygote','2-cell','4-cell','Blast'))
Type1
which(levels(Type1)=='Zygote')
which(Type1=='Zygote')
which(label=='Zygote')
LabelAll$label==levels(Type1)[1]
Index <- LabelAll$index[LabelAll$label==levels(Type1)[1]]
Index
levels(Type1)
i=1
Index <- LabelAll$index[LabelAll$label==levels(Type1)[i]]
length(index)
length(Index)
class(Index)
AllIndex=bind(AllIndex,Index)
AllIndex=rbind(AllIndex,Index)
for(i in 1:length(levels(Type1))){
Index <- LabelAll$index[LabelAll$label==levels(Type1)[i]]
if(i==1){
AllIndex=Index
} else{
AllIndex=rbind(AllIndex,Index)
}
}
AllIndex
AllIndex
for(i in 1:length(levels(Type1))){
Index <- LabelAll$index[LabelAll$label==levels(Type1)[i]]
if(i==1){
AllIndex=Index
} else{
AllIndex=combine(AllIndex,Index)
}
}
AllIndex
AllIndex <- integer()
for(i in 1:length(levels(Type1))){
Index <- LabelAll$index[LabelAll$label==levels(Type1)[i]]
if(i==1){
AllIndex=Index
} else{
AllIndex=combine(AllIndex,Index)
}
}
AllIndex <- integer()
AllIndex
for(i in 1:length(levels(Type1))){
Index <- LabelAll$index[LabelAll$label==levels(Type1)[i]]
if(i==1){
AllIndex=Index
} else{
AllIndex=combine(AllIndex,Index)
}
}
i=1
Index <- LabelAll$index[LabelAll$label==levels(Type1)[i]]
AllIndex=Index
i=2
Index <- LabelAll$index[LabelAll$label==levels(Type1)[i]]
Index
AllIndex=combine(AllIndex,Index)
AllIndex <- matrix(0,nrow=length(Type1),ncol=1)
AllIndex <- matrix(0,nrow=length(Type1),ncol=1)
for(i in 1:length(levels(Type1))){
Index <- LabelAll$index[LabelAll$label==levels(Type1)[i]]
if(i==1){
AllIndex[1:length(Index),]=Index
} else{
AllIndex=rbind(AllIndex,Index)
}
}
AllIndex <- matrix(0,nrow=length(Type1),ncol=1)
for(i in 1:length(levels(Type1))){
Index <- as.matrix(LabelAll$index[LabelAll$label==levels(Type1)[i]])
if(i==1){
AllIndex[1:length(Index),]=Index
} else{
AllIndex=rbind(AllIndex,Index)
}
}
AllIndex
LabelAll$label
label
i=2
Index <- as.matrix(LabelAll$index[LabelAll$label==levels(Type1)[i]])
Index
AllIndex <- matrix(0,nrow=length(Type1),ncol=1)
dim(AllIndex)
length(Type1)
i=1
Index <- as.matrix(LabelAll$index[LabelAll$label==levels(Type1)[i]])
Index
AllIndex[1:length(Index),]=Index
AllIndex
i=2
Index <- as.matrix(LabelAll$index[LabelAll$label==levels(Type1)[i]])
Index
AllIndex=rbind(AllIndex,Index)
AllIndex
for(i in 1:length(levels(Type1))){
Index <- as.matrix(LabelAll$index[LabelAll$label==levels(Type1)[i]])
if(i==1){
AllIndex=Index
} else{
AllIndex=rbind(AllIndex,Index)
}
}
AllIndex
DataName <- "Biase"
Type1=as.factor(Biase$cell_type1)
Type2=as.factor(Biase$cell_type2)
label <- curSim$label
label <- plyr::revalue(label, c("1"="2-cell",'2'='4-cell','3'='Blast','4'='Zygote'))
label <- factor(label,c('Zygote','2-cell','4-cell','Blast'))
Type1 <- plyr::revalue(Type1, c('zygote'='Zygote',"2cell"="2-cell",'4cell'='4-cell','blast'='Blast'))
Type1 <-factor(Type1,c('Zygote','2-cell','4-cell','Blast'))
#Type2 <- plyr::revalue(Type2, c("2cell"="2-cell",'4cell'='4-cell','zygote'='Zygote'))
LabelAll <- data.frame(index=1:length(label),label=label,Type1=Type1,Type2=Type2)
for(i in 1:length(levels(Type1))){
Index <- as.matrix(LabelAll$index[LabelAll$label==levels(Type1)[i]])
if(i==1){
AllIndex=Index
} else{
AllIndex=rbind(AllIndex,Index)
}
}
AllIndex
RCSL_B <- RCSL_B[AllIndex,AllIndex]
RCSL_B[1:5,1:5]
curSim$RCSL_B[1:5,1:5]
label
label <- label[AllIndex]
label
RCSL_B <- RCSL_B[AllIndex,AllIndex]
#dimnames(RCSL_B) <- list(c(1:nrow(RCSL_B)),c(1:nrow(RCSL_B)))
RCSL2_B <- curSim$RCSL2_B
RCSL2_B <- RCSL2_B[AllIndex,AllIndex]
#dimnames(RCSL2_B) <- list(c(1:nrow(RCSL2_B)),c(1:nrow(RCSL2_B)))
SIMLR_B <- Sim_all1$Biase$SIMLR_Sim
SIMLR_B <- SIMLR_B[AllIndex,AllIndex]
N=10
RCSL_B=log2(N*RCSL_B+1)
RCSL2_B=log2(N*RCSL2_B+1)
SIMLR_B=log2(N*SIMLR_B+1)
label <- as.matrix(curSim$label)
sampleLabel <- data.frame(index=1:length(label), label=label)
sampleLabel <- sampleLabel[order(sampleLabel$label),]
anno_row <- sampleLabel[,"label",drop=F]
label <- as.matrix(Constructed_Sim_1_8$Biase$label)
sampleLabel <- data.frame(index=1:length(label), label=label)
sampleLabel <- sampleLabel[order(sampleLabel$label),]
anno_row <- sampleLabel[,"label",drop=F]
anno_row <- data.frame(Type1=Biase$cell_type1,Type2=Biase$cell_type2)
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row$label))]
names(rowColors) <- unique(anno_row$label)
ann_colors <- list(label=rowColors)
Name <- names(Sim_all1[i])
title <- sprintf("%s",Name)
ch <- c(2,8,9)
color_my <-brewer.pal(9,name="Blues")[ch]  ## Blues  c("powderblue","seagreen4","palegreen4")
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=F,
annotation_colors=ann_colors[1], annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
Heat.RCSL2_B <- pheatmap(RCSL2_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=F,
annotation_colors=ann_colors[1], annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=F,
annotation_colors=ann_colors[1], annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=F,
annotation_colors=ann_colors[1], annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
## Heatmap of constructed similarity matrices
rm(list=ls(all=T))
gc()
library(SingleCellExperiment)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
library(reshape2)
library(gridExtra)
library(gtable)
library(grid)
Sim_all1 <- readRDS("/Users/qinglin/RProjects/Project1/NewImage/Heatmap/Constructed_Similarities_All.rds")
Sim_all2 <- readRDS("/Users/qinglin/RProjects/Project1/NewImage/Heatmap/Similarities_RCSL_All.rds")
Biase <- readRDS("/Users/qinglin/RProjects/Datasets/Biase.rds")
Yan <- readRDS("/Users/qinglin/RProjects/Datasets/Yan.rds")
Deng <- readRDS("/Users/qinglin/RProjects/Datasets/Deng.rds")
DataName <- "Biase"
Type1=as.factor(Biase$cell_type1)
Type2=as.factor(Biase$cell_type2)
label <- curSim$label
label <- plyr::revalue(label, c("1"="2-cell",'2'='4-cell','3'='Blast','4'='Zygote'))
label <- factor(label,c('Zygote','2-cell','4-cell','Blast'))
Type1 <- plyr::revalue(Type1, c('zygote'='Zygote',"2cell"="2-cell",'4cell'='4-cell','blast'='Blast'))
Type1 <-factor(Type1,c('Zygote','2-cell','4-cell','Blast'))
#Type2 <- plyr::revalue(Type2, c("2cell"="2-cell",'4cell'='4-cell','zygote'='Zygote'))
LabelAll <- data.frame(index=1:length(label),label=label,Type1=Type1,Type2=Type2)
for(i in 1:length(levels(Type1))){
Index <- as.matrix(LabelAll$index[LabelAll$label==levels(Type1)[i]])
if(i==1){
AllIndex=Index
} else{
AllIndex=rbind(AllIndex,Index)
}
}
label <- label[AllIndex]
curSim <- Sim_all2$Biase
RCSL_B <- curSim$RCSL_B
RCSL_B <- RCSL_B[AllIndex,AllIndex]
#dimnames(RCSL_B) <- list(c(1:nrow(RCSL_B)),c(1:nrow(RCSL_B)))
RCSL2_B <- curSim$RCSL2_B
RCSL2_B <- RCSL2_B[AllIndex,AllIndex]
#dimnames(RCSL2_B) <- list(c(1:nrow(RCSL2_B)),c(1:nrow(RCSL2_B)))
SIMLR_B <- Sim_all1$Biase$SIMLR_Sim
SIMLR_B <- SIMLR_B[AllIndex,AllIndex]
N=10
RCSL_B=log2(N*RCSL_B+1)
RCSL2_B=log2(N*RCSL2_B+1)
SIMLR_B=log2(N*SIMLR_B+1)
label <- as.matrix(curSim$label)
sampleLabel <- data.frame(index=1:length(label), label=label)
sampleLabel <- sampleLabel[order(sampleLabel$label),]
anno_row <- sampleLabel[,"label",drop=F]
label <- as.matrix(Constructed_Sim_1_8$Biase$label)
sampleLabel <- data.frame(index=1:length(label), label=label)
sampleLabel <- sampleLabel[order(sampleLabel$label),]
anno_row <- sampleLabel[,"label",drop=F]
anno_row <- data.frame(Type1=Biase$cell_type1,Type2=Biase$cell_type2)
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row$label))]
names(rowColors) <- unique(anno_row$label)
ann_colors <- list(label=rowColors)
Name <- names(Sim_all1[i])
title <- sprintf("%s",Name)
ch <- c(2,8,9)
color_my <-brewer.pal(9,name="Blues")[ch]  ## Blues  c("powderblue","seagreen4","palegreen4")
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=F,
annotation_colors=ann_colors[1], annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=F,
annotation_colors=ann_colors[1], annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row$label))]
names(rowColors) <- unique(anno_row$label)
ann_colors <- list(label=rowColors)
Name <- names(Sim_all1[i])
title <- sprintf("%s",Name)
ch <- c(2,8,9)
color_my <-brewer.pal(9,name="Blues")[ch]  ## Blues  c("powderblue","seagreen4","palegreen4")
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=F,
annotation_colors=ann_colors[1], annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
label
LabelAll
## Heatmap of constructed similarity matrices
rm(list=ls(all=T))
gc()
library(SingleCellExperiment)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
library(reshape2)
library(gridExtra)
library(gtable)
library(grid)
Sim_all1 <- readRDS("/Users/qinglin/RProjects/Project1/NewImage/Heatmap/Constructed_Similarities_All.rds")
Sim_all2 <- readRDS("/Users/qinglin/RProjects/Project1/NewImage/Heatmap/Similarities_RCSL_All.rds")
Biase <- readRDS("/Users/qinglin/RProjects/Datasets/Biase.rds")
Yan <- readRDS("/Users/qinglin/RProjects/Datasets/Yan.rds")
Deng <- readRDS("/Users/qinglin/RProjects/Datasets/Deng.rds")
DataName <- "Biase"
Type1=as.factor(Biase$cell_type1)
Type2=as.factor(Biase$cell_type2)
label <- curSim$label
label <- plyr::revalue(label, c("1"="2-cell",'2'='4-cell','3'='Blast','4'='Zygote'))
label <- curSim$label
curSim <- Sim_all2$Biase
label <- curSim$label
label <- plyr::revalue(label, c("1"="2-cell",'2'='4-cell','3'='Blast','4'='Zygote'))
label <- factor(label,c('Zygote','2-cell','4-cell','Blast'))
label <- plyr::revalue(label, c("1"="2-cell",'2'='4-cell','3'='Blast','4'='Zygote'))
Type1=as.factor(Biase$cell_type1)
Type2=as.factor(Biase$cell_type2)
curSim <- Sim_all2$Biase
label <- curSim$label
label <- plyr::revalue(label, c("1"="2-cell",'2'='4-cell','3'='Blast','4'='Zygote'))
label <- factor(label,c('Zygote','2-cell','4-cell','Blast'))
Type1 <- plyr::revalue(Type1, c('zygote'='Zygote',"2cell"="2-cell",'4cell'='4-cell','blast'='Blast'))
Type1 <-factor(Type1,c('Zygote','2-cell','4-cell','Blast'))
#Type2 <- plyr::revalue(Type2, c("2cell"="2-cell",'4cell'='4-cell','zygote'='Zygote'))
LabelAll <- data.frame(index=1:length(label),label=label,Type1=Type1,Type2=Type2)
for(i in 1:length(levels(Type1))){
Index <- as.matrix(LabelAll$index[LabelAll$label==levels(Type1)[i]])
if(i==1){
AllIndex=Index
} else{
AllIndex=rbind(AllIndex,Index)
}
}
label <- label[AllIndex]
label
label <- curSim$label[AllIndex]
label
RCSL_B <- curSim$RCSL_B
RCSL_B <- RCSL_B[AllIndex,AllIndex]
#dimnames(RCSL_B) <- list(c(1:nrow(RCSL_B)),c(1:nrow(RCSL_B)))
RCSL2_B <- curSim$RCSL2_B
RCSL2_B <- RCSL2_B[AllIndex,AllIndex]
#dimnames(RCSL2_B) <- list(c(1:nrow(RCSL2_B)),c(1:nrow(RCSL2_B)))
SIMLR_B <- Sim_all1$Biase$SIMLR_Sim
SIMLR_B <- SIMLR_B[AllIndex,AllIndex]
N=10
RCSL_B=log2(N*RCSL_B+1)
RCSL2_B=log2(N*RCSL2_B+1)
SIMLR_B=log2(N*SIMLR_B+1)
sampleLabel <- data.frame(index=1:length(label), label=label)
sampleLabel <- sampleLabel[order(sampleLabel$label),]
anno_row <- sampleLabel[,"label",drop=F]
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row$label))]
names(rowColors) <- unique(anno_row$label)
ann_colors <- list(label=rowColors)
Name <- names(Sim_all1[i])
title <- sprintf("%s",Name)
ch <- c(2,8,9)
color_my <-brewer.pal(9,name="Blues")[ch]  ## Blues  c("powderblue","seagreen4","palegreen4")
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=F,
annotation_colors=ann_colors[1], annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
ann_colors
anno_row
label
anno_row <- label
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row$label))]
names(rowColors) <- unique(anno_row$label)
anno_row <- sampleLabel[,"label",drop=F]
anno_row
anno_row <- label
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row))]
names(rowColors) <- unique(anno_row$label)
names(rowColors) <- unique(anno_row)
ann_colors <- list(label=rowColors)
Name <- names(Sim_all1[i])
title <- sprintf("%s",Name)
ch <- c(2,8,9)
color_my <-brewer.pal(9,name="Blues")[ch]  ## Blues  c("powderblue","seagreen4","palegreen4")
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=F,
annotation_colors=ann_colors[1], annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
colorRampPalette(color_my)(100)
anno_row
anno_row
ann_colors
rowColors
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=T,
annotation_names_row=F,
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
annotation_col
anno_row
length(anno_row)
dim(RCSL_B)
colnames(mat)
colnames(RCSL_B)
dimnames(RCSL_B) <- list(c(1:nrow(RCSL_B)),c(1:nrow(RCSL_B)))
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=T,
annotation_names_row=F,  annotation_colors=ann_colors[1],
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
anno_row
class(anno_row)
sampleLabel <- data.frame(index=1:length(label), label=label)
sampleLabel <- sampleLabel[order(sampleLabel$label),]
anno_row <- sampleLabel[,"label",drop=F]
anno_row
class(anno_row)
anno_row <- as.data.frame(label)
anno_row
anno_row <- as.data.frame(label)
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row))]
names(rowColors) <- unique(anno_row)
ann_colors <- list(label=rowColors)
Name <- names(Sim_all1[i])
title <- sprintf("%s",Name)
ch <- c(2,8,9)
color_my <-brewer.pal(9,name="Blues")[ch]  ## Blues  c("powderblue","seagreen4","palegreen4")
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=T,
annotation_names_row=F,  annotation_colors=ann_colors[1],
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
anno_row
### We need to set the names for each color according to the levels of the factor label ###
rowColors <- c(brewer.pal(9, "Set1"),
brewer.pal(3,"Set2")[1:3])[1:length(unique(anno_row$label))]
names(rowColors) <- unique(anno_row$label)
ann_colors <- list(label=rowColors)
Name <- names(Sim_all1[i])
title <- sprintf("%s",Name)
ch <- c(2,8,9)
color_my <-brewer.pal(9,name="Blues")[ch]  ## Blues  c("powderblue","seagreen4","palegreen4")
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=T,
annotation_names_row=F,  annotation_colors=ann_colors[1],
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
Heat.RCSL_B
Heat.RCSL_B <- pheatmap(RCSL_B,
color=colorRampPalette(color_my)(100),
annotation_row=anno_row, annotation_col=anno_row, annotation_legend=T,
annotation_names_row=F,  annotation_colors=ann_colors[1],
annotation_names_col=F,fontsize=9,legend=FALSE,
cluster_row=F, cluster_col=F, show_rownames=F, show_colnames=F,
border_color=F)
draw(Heat.RCSL_B
>)
setwd('/Users/qinglin/Soteware/RCSL')
setwd('/Users/qinglin/Software/RCSL')
devtools::document()
install.packages(Rtsne)
install.packages("Rtsne")
devtools::document()
BiocCheck::BiocCheck(:RCSL)
BiocCheck::BiocCheck("RCSL")
setwd('/Users/qinglin/Software')
BiocCheck::BiocCheck("RCSL")
BiocCheck::BiocCheck("RCSL")
BiocCheck::BiocCheck("RCSL")
BiocCheck::BiocCheck("RCSL")
BiocCheck::BiocCheck("RCSL")
BiocCheck::BiocCheck("RCSL")
getwd()
setwd('/Users/qinglin/Github/')
library(BiocCheck)
BiocCheck("RCSL")
setwd('./RCSL')
devtools::document()
BiocCheck("RCSL")
setwd('/userq/qinglin/github/')
setwd('/users/qinglin/github/')
BiocCheck("RCSL")
BiocCheck("RCSL")
BiocCheck("RCSL")
